/*
Copyright ApeCloud, Inc.
Licensed under the Apache v2(found in the LICENSE file in the root directory).
*/

package db

import (
	"errors"
	"reflect"
	"sync"

	"github.com/golang/mock/gomock"

	"vitess.io/vitess/go/vt/vtconsensus/inst"
)

// MockAgent is a mock of Agent interface
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// TestConsensusLocalView mocks a row from wesql-server information_schema.wesql_cluster_local
type TestConsensusLocalView struct {
	ServerID       int
	CurrentTerm    int
	CurrentLeader  string
	LeaderHostName string // LeaderHostName is from wesql_cluster_local.leader_host
	LeaderHostPort int    // LeaderHostPort is from wesql_cluster_local.leader_port
	Role           ConsensusRole
	IsRW           int
}

// TestConsensusMember mocks a row from wesql-server information_schema.wesql_cluster_global
type TestConsensusMember struct {
	ServerID       int
	MySQLHost      string // MySQLHost is from wesql-server wesql_cluster_global.host.
	MySQLPort      int    // MySQLPort is from wesql-server wesql_cluster_global.port.
	Role           ConsensusRole
	ForceSync      int
	ElectionWeight int
	LearnerSource  string
	Connected      bool
}

// TestConsensusGlobalView is an instance's view for the wesql-server information_schema.wesql_cluster_global
type TestConsensusGlobalView struct {
	LeaderTabletMySQLHost string // LeaderMySQLHost is tablet.MysqlHostname, initialized by vttablet running option "--db_host".
	LeaderTabletMySQLPort int    // LeaderMySQLPort is tablet.MysqlPort, initialized by vttablet running options "--db_port".
	LeaderServerID        int
	ResolvedMember        map[inst.InstanceKey]ConsensusMember // inst.InstanceKey is generated by tablet.MysqlHostname and tablet.MysqlPort.
	LocalView             []*ConsensusLocalView
	sync.Mutex
}

// NewConsensusGlobalView mocks base method.
func (m *MockAgent) NewConsensusGlobalView() *ConsensusGlobalView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsensusGlobalView")
	ret0, _ := ret[0].(*ConsensusGlobalView)
	return ret0
}

// NewConsensusGlobalView indicates an expected call of NewConsensusGlobalView.
func (mr *MockAgentMockRecorder) NewConsensusGlobalView() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsensusGlobalView", reflect.TypeOf((*MockAgent)(nil).NewConsensusGlobalView))
}

// FetchConsensusLocalView mocks base method.
func (m *MockAgent) FetchConsensusLocalView(alias string, instanceKey *inst.InstanceKey,
	globalView *ConsensusGlobalView) (*ConsensusLocalView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchConsensusLocalView", alias, instanceKey, globalView)
	ret0, _ := ret[0].(*ConsensusLocalView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchConsensusLocalView indicates an expected call of FetchConsensusLocalView
func (mr *MockAgentMockRecorder) FetchConsensusLocalView(alias, instanceKey, globalView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchConsensusLocalView",
		reflect.TypeOf((*MockAgent)(nil).FetchConsensusLocalView), alias, instanceKey, globalView)
}

// FetchConsensusGlobalView mocks base method.
func (m *MockAgent) FetchConsensusGlobalView(globalView *ConsensusGlobalView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchConsensusGlobalView", globalView)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchConsensusGlobalView indicates an expected call of FetchConsensusGlobalView
func (mr *MockAgentMockRecorder) FetchConsensusGlobalView(globalView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchConsensusGlobalView",
		reflect.TypeOf((*MockAgent)(nil).FetchConsensusGlobalView), globalView)
}

func BuildConsensusLocalView(alias string, tabletMySQLHost string, tabletMySQLPort int, input TestConsensusLocalView, globalView *ConsensusGlobalView) (*ConsensusLocalView, error) {
	if input == (TestConsensusLocalView{}) {
		return nil, errors.New("no such host")
	}

	localView := newConsensusLocalView(
		alias,
		input.ServerID,
		input.CurrentTerm,
		input.CurrentLeader,
		input.LeaderHostName,
		input.LeaderHostPort,
		tabletMySQLHost,
		tabletMySQLPort,
		input.Role,
		input.IsRW,
	)
	globalView.Lock()
	defer globalView.Unlock()
	globalView.LocalView = append(globalView.LocalView, localView)
	return localView, nil
}

func BuildConsensusGlobalView(input []TestConsensusMember, globalView *ConsensusGlobalView) error {
	// If input is empty, it means leader host can not access.
	if len(input) == 0 {
		return errors.New("no such host")
	}

	mk := make(map[inst.InstanceKey]ConsensusMember)
	for _, data := range input {
		var tabletMySQLHost string
		var tabletMySQLPort int

		// If data is empty, it means no rows in wesql_cluster_global.
		if data == (TestConsensusMember{}) {
			globalView.ResolvedMember = mk
			return nil
		}

		for _, lv := range globalView.LocalView {
			if lv.ServerID == data.ServerID {
				tabletMySQLHost = lv.TabletMySQLHost
				tabletMySQLPort = lv.TabletMySQLPort
				break
			}
		}

		member := newConsensusMember(
			data.ServerID,
			data.MySQLHost,
			data.MySQLPort,
			data.Role,
			data.ForceSync,
			data.ElectionWeight,
			data.LearnerSource,
			data.Connected,
		)
		mk[inst.InstanceKey{Hostname: tabletMySQLHost, Port: tabletMySQLPort}] = *member
	}
	globalView.ResolvedMember = mk
	return nil
}
