name: Cherry-pick PR to Release Branch

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: read
  issues: write

jobs:
  cherry-pick:
    if: startsWith(github.event.comment.body, '/cherry-pick ')
    runs-on: ubuntu-latest

    steps:
      - name: Extract information
        id: extract
        run: |
          echo "RELEASE_BRANCH=$(echo '${{ github.event.comment.body }}' | sed -E 's#/cherry-pick\s+(\S+)#\1#')" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "COMMENT_USER=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT

      - name: Check user permissions
        id: permission
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username = '${{ steps.extract.outputs.COMMENT_USER }}';
            const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username,
            });
            const permitted = ['admin', 'write', 'maintain'].includes(data.permission);
            core.setOutput('permitted', permitted.toString());

      - name: Verify user permissions
        if: steps.permission.outputs.permitted != 'true'
        run: |
          echo "User ${{ steps.extract.outputs.COMMENT_USER }} does not have write permissions."
          exit 1

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if release branch exists
        run: |
          if git ls-remote --heads origin "${{ steps.extract.outputs.RELEASE_BRANCH }}" | grep -q "${{ steps.extract.outputs.RELEASE_BRANCH }}"; then
            echo "Release branch exists."
          else
            echo "Release branch '${{ steps.extract.outputs.RELEASE_BRANCH }}' does not exist."
            exit 1
          fi

      - name: Fetch PR commits
        id: fetch_commits
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.extract.outputs.PR_NUMBER }}', 10);
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 250, // Adjust if PRs have more than 250 commits
            });
            const commitSHAs = commits.map(commit => commit.sha).join(' ');
            core.setOutput('commit_shas', commitSHAs);

      - name: Cherry-pick commits
        run: |
          git checkout "${{ steps.extract.outputs.RELEASE_BRANCH }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          for commit in ${{ steps.fetch_commits.outputs.commit_shas }}; do
            echo "Cherry-picking commit $commit"
            git cherry-pick $commit || { git cherry-pick --abort; exit 1; }
          done

      - name: Push changes
        run: |
          git push origin HEAD:"${{ steps.extract.outputs.RELEASE_BRANCH }}"

      - name: Comment on PR (Success)
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commits = '${{ steps.fetch_commits.outputs.commit_shas }}'.split(' ');
            let commitList = commits.map(sha => `- [\`${sha.substring(0,7)}\`](https://github.com/${{ github.repository }}/commit/${sha})`).join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt('${{ steps.extract.outputs.PR_NUMBER }}', 10),
              body: `✅ Successfully cherry-picked to \`${{ steps.extract.outputs.RELEASE_BRANCH }}\` branch.\n\n**Cherry-picked Commits:**\n${commitList}`
            });

      - name: Comment on PR (Failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt('${{ steps.extract.outputs.PR_NUMBER }}', 10),
              body: `❌ Failed to cherry-pick to \`${{ steps.extract.outputs.RELEASE_BRANCH }}\` branch due to conflicts or errors. Please resolve manually.`
            });