name: "MTR Test - Ubuntu Docker Cluster"
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - 'release-*'
    tags:
      - '*'
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-mtr
  cancel-in-progress: true

jobs:
  build-image:
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build_image.yml
    with:
      branch: ${{ github.ref }}
      image_name: ${{ github.repository_owner }}/wescale_ci_image
      tags: test-${{ github.sha }}
      registry: ghcr.io
      platforms: linux/amd64

  setup:
    name: "MTR Test - Ubuntu Docker Cluster"
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: Check if workflow needs to be skipped
        id: skip-workflow
        run: |
          skip='false'
          if [[ "${{github.event.pull_request}}" ==  "" ]] && [[ "${{github.ref}}" != "refs/heads/main" ]] && [[ ! "${{github.ref}}" =~ ^refs/heads/release-[0-9]+\.[0-9]$ ]] && [[ ! "${{github.ref}}" =~ "refs/tags/.*" ]]; then
            skip='true'
          fi
          echo Skip ${skip}
          echo "skip-workflow=${skip}" >> $GITHUB_OUTPUT

      - name: Checkout code
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        uses: actions/checkout@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up cluster
        run: |
          CONTAINER_NAME="mysql-server"
          MYSQL_ROOT_PASSWORD="passwd"
          MYSQL_ROOT_HOST="%"
          HOST_PORT=3306
          CONTAINER_PORT=3306
          DATA_DIR="$(pwd)/vtdataroot/mysql"
          CONFIG_FILE="$DATA_DIR/my.cnf"
          IMG="mysql/mysql-server:8.0.32"
          WESCALE_CI_IMAGE="ghcr.io/${{ github.repository_owner }}/wescale_ci_image:test-${{ github.sha }}"
          
          # 创建数据目录和日志目录（如果不存在）
          mkdir -p "$DATA_DIR/data"
          mkdir -p "$DATA_DIR/log"
          
          # 创建 my.cnf（如果不存在）
          if [ ! -f "$CONFIG_FILE" ]; then
          cat <<EOL > "$CONFIG_FILE"
          [mysqld]
          port=3306
          bind-address=0.0.0.0
          log-bin=binlog
          gtid_mode=ON
          enforce_gtid_consistency=ON
          log_replica_updates=ON
          binlog_format=ROW
          datadir=/data/mysql/data
          log-error=/data/mysql/log/mysqld-error.log
          EOL
          fi
          
          # 设置目录权限
          chmod -R 777 "$DATA_DIR"
          chmod 644 "$CONFIG_FILE"
          
          docker network create my-network
          
          # 运行 Docker 容器
          docker run -itd --name $CONTAINER_NAME \
          --network my-network \
          -p $HOST_PORT:$CONTAINER_PORT \
          -v "$DATA_DIR":/data/mysql \
          -v "$CONFIG_FILE":/etc/my.cnf \
          -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
          -e MYSQL_ROOT_HOST="$MYSQL_ROOT_HOST" \
          $IMG
          
          docker run -itd \
          --name wescale \
          --network my-network \
          -w /vt/examples/wesql-server \
          -e MYSQL_ROOT_USER=root \
          -e MYSQL_ROOT_PASSWORD=passwd \
          -e MYSQL_PORT=3306 \
          -e MYSQL_HOST=wesql-server \
          -p 15306:15306 \
          $WESCALE_CI_IMAGE \
          /vt/examples/wesql-server/init_single_node_cluster.sh

#      - name: Compile source
#        if: steps.skip-workflow.outputs.skip-workflow == 'false'
#        timeout-minutes: 30
#        run: |
#          # install etcd
#          BUILD_CHROME=0 BUILD_JAVA=0 BUILD_CONSUL=0 BUILD_K3S=0 BUILD_ETCD=1 ./bootstrap.sh
#
#          make failpoint-enable
#          make build
#          make failpoint-disable
#
#      - name: Start MySQL-Server & WeScale
#        if: steps.skip-workflow.outputs.skip-workflow == 'false'
#        run: |
#          export PATH=$PATH:$(pwd)/bin
#          cd ./examples/wesql-server
#          ./start_mysql_server.sh
#          ./init_single_node_cluster.sh 2>&1 | tee init_script_logs.txt &

      - name: Checkout mysql-tester code
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        uses: actions/checkout@v3
        with:
          repository: apecloud/mysql-tester
          path: './mysql-tester'

      - name: Build mysql-tester
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        run: |
          cd ./mysql-tester && \
          mkdir bin && \
          make build

      - name: Run MTR Tests
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        run: |
          cd ./mysql-tester && \
          eatmydata -- ./bin/mysql-tester -user root -port 15306 -path testcase/wesql-scale 2>&1 | tee -a output.txt
          
          # check if any test failed
          if grep -q -- 'level=error' ./mysql-tester/output.txt; then
              echo "Testcase is failed"
              exit 1
          else
              echo "Testcase is successful"
          fi

      - name: Print WeScale Logs
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        run: |
          docker logs mysql-server
          cat ./examples/wesql-server/init_script_logs.txt

      - name: Clean up
        if: always()
        run: |
          TOKEN="${{ github.token }}"
          OWNER="${{ github.repository_owner }}"
          TAG="test-${{ github.sha }}"
          PACKAGE_NAME="wescale_ci_image"

          echo "Fetching package versions..."
          VERSIONS_JSON=$(curl -s \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME/versions")

          echo $TAG
          echo $VERSIONS_JSON

          PACKAGE_VERSION_ID=$(echo "$VERSIONS_JSON" | jq -r ".[] | select(.metadata.container.tags[] | contains(\"$TAG\")) | .id")

          echo $PACKAGE_VERSION_ID

          if [ ! -z "$PACKAGE_VERSION_ID" ]; then
            echo "Found image version ID: $PACKAGE_VERSION_ID"

            DELETE_RESPONSE=$(curl -X DELETE -s -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME/versions/$PACKAGE_VERSION_ID")

            if [ -z "$DELETE_RESPONSE" ]; then
              echo "✅ Successfully deleted image version: $PACKAGE_VERSION_ID"
            else
              echo "❌ Failed to delete image version. Response: $DELETE_RESPONSE"
              exit 1
            fi
          else
            echo "❌ Could not find image version with tag: $TAG"
            echo "Available versions:"
            echo "$VERSIONS_JSON" | jq -r '.[].names'
            exit 1
          fi
