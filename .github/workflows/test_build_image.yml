name: Test Docker Build Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  test-build:
    permissions:
      contents: read
      packages: write

    uses: ./.github/workflows/build_image.yml
    with:
      branch: ${{ github.ref }}
      image_name: test/wesqlscale
      tags: test-${{ github.sha }}
      registry: ghcr.io

  verify-and-cleanup:
    needs: test-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Wait for image to be available
        run: |
          for i in {1..12}; do
            if docker manifest inspect ghcr.io/test/wesqlscale:test-${{ github.sha }} >/dev/null 2>&1; then
              echo "Image is available"
              exit 0
            fi
            echo "Waiting for image to be available... (attempt $i/12)"
            sleep 5
          done
          echo "Timeout waiting for image"
          exit 1

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Verify image exists
        run: |
          docker pull ghcr.io/test/wesqlscale:test-${{ github.sha }}

      - name: Delete test image
        if: always()
        run: |
          TOKEN="${{ github.token }}"
          IMAGE="test/wesqlscale"
          TAG="test-${{ github.sha }}"
          
          PACKAGE_VERSION_ID=$(curl -s -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/packages/container/$IMAGE/versions" | \
            jq -r ".[] | select(.metadata.container.tags[] == \"$TAG\") | .id")
          
          if [ ! -z "$PACKAGE_VERSION_ID" ]; then
            curl -X DELETE -s -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user/packages/container/$IMAGE/versions/$PACKAGE_VERSION_ID"
            echo "Deleted image version: $PACKAGE_VERSION_ID"
          else
            echo "Image version not found"
            exit 1
          fi